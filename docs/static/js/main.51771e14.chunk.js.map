{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/Spinner.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setinputValue","onSubmit","e","preventDefault","trim","length","categories","className","type","value","onChange","target","placeholder","getGifs","category","a","fetch","encodeURI","resp","json","data","gifs","map","img","id","title","url","images","downsized_medium","GifGridItem","src","alt","Spinner","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","key","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"0NAIaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,cAAmB,EAETC,mBAAS,IAFA,mBAEtCC,EAFsC,KAE1BC,EAF0B,KAgB7C,OACI,0BAAMC,SATW,SAACC,GAClBA,EAAEC,iBAECJ,EAAWK,OAAOC,OAAS,IAC1BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,OAKd,yBAAKO,UAAU,gBACX,2BACIC,KAAK,OACLC,MAAOV,EACPW,SAlBU,SAACR,GACvBF,EAAcE,EAAES,OAAOF,QAkBXG,YAAY,sD,uBC3BnBC,EAAO,uCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DACH,mCACF,EAFK,SAIAC,MAAM,0CAAD,OAA2CC,UAAUH,GAArD,kBAFV,EAEU,oBAHR,qCADG,cAIbI,EAJa,gBAKEA,EAAKC,OALP,uBAKZC,EALY,EAKZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACxB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXC,IAAG,UAAEH,EAAII,cAAN,aAAE,EAAYC,iBAAiBF,QAXvB,kBAcZL,GAdY,4CAAH,sDCEPQ,EAAc,SAAC,GAAkB,IAAjBJ,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAEhC,OACI,yBAAKnB,UAAU,QACX,yBAAKA,UAAU,YACX,yBAAKuB,IAAKJ,EAAKK,IAAKN,KAExB,2BAAIA,KCNHO,G,MAAU,WACnB,OACI,yBAAKzB,UAAU,YACX,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,iBACf,yBAAKA,UAAU,oBCNd0B,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdhB,mBAAS,CACjCsB,KAAM,GACNc,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAexC,OATAC,qBAAU,WACRxB,EAAQC,GAAUwB,MAAK,SAACf,GAAD,OACrBa,EAAS,CACPhB,KAAMG,EACNW,SAAS,SAGZ,CAACpB,IAEGqB,EDZ2BI,CAAazB,GAAjCa,EADyB,EAC/BP,KAAcc,EADiB,EACjBA,QAEtB,OACE,oCACE,wBAAI3B,UAAU,cAAcO,GAC3BoB,GAAW,kBAAC,EAAD,MAEXP,EAAOtB,OAAS,IAAM6B,GACrB,yBAAK3B,UAAU,aACZoB,EAAOL,KAAI,SAACC,GAAD,OACV,kBAAC,EAAD,eACEiB,IAAKjB,EAAIC,IAELD,QAKO,IAAlBI,EAAOtB,SAAiB6B,GAAW,6DEU3BO,EA9BM,WAAK,IAAD,EACe3C,mBAAS,CAAC,SADzB,mBACdQ,EADc,KACFT,EADE,KAWrB,OACI,oCACI,wBAAIU,UAAU,SAAd,wBACA,kBAAC,EAAD,CACIV,cAAeA,IAGlBS,EAAWgB,KAAI,SAAAR,GAAQ,OACpB,kBAAC,EAAD,CACI0B,IAAK1B,EACLA,SAAUA,S,MCpB9B4B,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,U","file":"static/js/main.51771e14.chunk.js","sourcesContent":["import React from 'react'\r\nimport { useState } from 'react'\r\nimport PropTypes from 'prop-types';\r\n\r\nexport const AddCategory = ( {setCategories}) => {\r\n\r\n    const [inputValue, setinputValue] = useState('');\r\n\r\n    const handleInputChange = (e) =>{                                            \r\n        setinputValue(e.target.value)\r\n    }\r\n\r\n    const handleSubmit = (e) =>{\r\n        e.preventDefault();\r\n        // Validando que el inputValue reciba más de dos caracteres\r\n        if(inputValue.trim().length > 2){\r\n            setCategories(categories => [inputValue, ...categories]);\r\n            setinputValue('')\r\n        }\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div className=\"form_control\">\r\n                <input \r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange } \r\n                    placeholder=\"Escribe el nombre del gif que desees buscar ..\"   \r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategories: PropTypes.func.isRequired\r\n}","export const getGifs = async(category)=>{\r\n    const api_key = 'Z33vHvisIfwU7cQnRFcfPLxeswnZRun1';\r\n    const limit = 9;\r\n\r\n    const resp = await fetch(`https://api.giphy.com/v1/gifs/search?q=${encodeURI(category)}&limit=${limit}&api_key=${api_key}`);\r\n    const {data} = await resp.json();\r\n\r\n    const gifs = data.map(img =>{\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ({title, url}) => {\r\n\r\n    return (\r\n        <div className=\"card\">\r\n            <div className=\"card_img\">\r\n                <img src={url} alt={title}/>\r\n            </div>\r\n            <p>{title}</p>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport './Spinner.css'\r\n\r\nexport const Spinner = () => {\r\n    return (\r\n        <div className=\"sk-chase\">\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n            <div className=\"sk-chase-dot\"></div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { useFetchGifs } from '../hooks/useFetchGifs';\r\nimport { GifGridItem } from './GifGridItem';\r\nimport { Spinner } from './Spinner';\r\n\r\nexport const GifGrid = ({ category }) => {\r\n  const { data: images, loading } = useFetchGifs(category);\r\n\r\n  return (\r\n    <>\r\n      <h2 className=\"grid_title\">{category}</h2>\r\n      {loading && <Spinner />}\r\n\r\n      {images.length > 0 && !loading && (\r\n        <div className=\"card_grid\">\r\n          {images.map((img) => (\r\n            <GifGridItem\r\n              key={img.id}\r\n              // Enviando las propiedades de img\r\n              {...img}\r\n            />\r\n          ))}\r\n        </div>\r\n      )}\r\n      {images.length === 0 && !loading && <p>No se encontraron resultados</p>}\r\n    </>\r\n  );\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data: [],\r\n    loading: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    getGifs(category).then((img) =>\r\n      setState({\r\n        data: img,\r\n        loading: false,\r\n      })\r\n    );\r\n  }, [category]);\r\n\r\n  return state;\r\n};\r\n","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nconst GifExpertApp = ()=>{\r\n    const [categories, setCategories] = useState(['Cats'])\r\n        /*\r\n    const handleAdd = ()=>{\r\n       -- Extrayendo las categorias con el operador de propagación [...categorias]\r\n\r\n        setCategories([...categories, 'Hola Mundo']);\r\n        setCategories(categ => [...categ, 'Hola Mundo']);\r\n    }\r\n    */ \r\n\r\n    return(\r\n        <>\r\n            <h1 className=\"title\">Buscando GIF - GIPHY</h1>\r\n            <AddCategory \r\n                setCategories={setCategories}\r\n            />\r\n\r\n            {categories.map(category=>(\r\n                <GifGrid \r\n                    key={category}\r\n                    category={category}\r\n                />\r\n                ) \r\n            )}\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default GifExpertApp;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport GifExpertApp from './GifExpertApp';\r\nimport './GifExpertApp.css';\r\n\r\nReactDOM.render(<GifExpertApp />, document.getElementById('root'));\r\n"],"sourceRoot":""}